{
    "sourceFile": "Develop/script.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 156,
            "patches": [
                {
                    "date": 1637038011201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1637071751580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+/* \t        \n+            BASIC UTILITY: generate random number between two numbers\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+//     display password\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637071832152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+/* \t        \n+            BASIC UTILITY: generate random number between two numbers\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+//     display password\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = \"password\"\n+  //generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637072095437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+/* \t        \n+            BASIC UTILITY: generate random number between two numbers\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword() {\n+  var generatedPassword = \"this is what we print\";\n+  return(generatePassword);\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637072480292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+/* \t        \n+            BASIC UTILITY: generate random number between two numbers\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword() {\n+  var generatedPassword = \"this is what we print\";\n+  return generatePassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637072522191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+/* \t        \n+            BASIC UTILITY: generate random number between two numbers\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword() {\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637072588038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+/* \t        \n+            BASIC UTILITY: generate random number between two numbers\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637073205720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+/* \t        \n+            BASIC UTILITY: generate random number between two numbers */\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.random();\n+  return x;\n+}            \n+\n+            /*\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637073300850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.random();\n+  return x;\n+}            \n+\n+            /*\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637073453793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+            /*\n+            function for pulling from list\n+                get length of this array\n+                get a random number based on length\n+                pull from the array\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637074304028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+var anarray = [a,b,c,d,e]\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// function for pulling a value at random from an array\n+var getRandomElementFrom = function(array) {\n+  var lastElementValue = arrayLength(array) - 1;\n+  var selectedValue = getRandomNumberFromTo(0, lastElementValue);\n+  return array[selectedValue];\n+}\n+                // get length of this array\n+                // get a random number based on length\n+                // pull from the array\n+            \n+            /*\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637074811528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+var anarray = [a,b,c,d,e]\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// function for pulling a value at random from an array\n+var getRandomElementFrom = function(array) {\n+  var lastElementValue = arrayLength(array) - 1;\n+  var selectedValue = getRandomNumberFromTo(0, lastElementValue);\n+  return array[selectedValue];\n+}\n+                // get length of this array\n+                // get a random number based on length\n+                // pull from the array\n+            \n+            /*\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637074886076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+var anarray = ['a','b','c','d','e']\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// function for pulling a value at random from an array\n+var getRandomElementFrom = function(array) {\n+  var lastElementValue = arrayLength(array) - 1;\n+  var selectedValue = getRandomNumberFromTo(0, lastElementValue);\n+  return array[selectedValue];\n+}\n+                // get length of this array\n+                // get a random number based on length\n+                // pull from the array\n+            \n+            /*\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637075424016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+var anarray = ['a','b','c','d','e']\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// function for pulling a value at random from an array\n+var getRandomElementFrom = function(array) {\n+  var lastElementValue = array.length - 1;\n+  var selectedValue = getRandomNumberFromTo(0, lastElementValue);\n+  return array[selectedValue];\n+}\n+                // get length of this array\n+                // get a random number based on length\n+                // pull from the array\n+            \n+            /*\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637075736048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+var anarray = ['a','b','c','d','e']\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// function for pulling a value at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+                // get length of this array\n+                // get a random number based on length\n+                // pull from the array\n+            \n+            /*\n+            function for shuffling\n+                set up array to be scrambled\n+                get a random number in length of array\n+                pull out that location in the array\n+                    send out that value\n+                    remove that value from the array\n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions\n+                number of characters\n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+welcome user\n+how long a password\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637077250784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+var anarray = ['a','b','c','d','e']\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+// SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n+// subtract number of required from total\n+// fill those at random\n+// squeeze in required using splice\n+\n+            /*\n+          \n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637077378648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+var anarray = ['a','b','c','d','e']\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+// //    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+// // SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n+// // subtract number of required from total\n+// // fill those at random\n+// // squeeze in required using splice\n+\n+//             /*\n+          \n+//             BASIC VAR: arrays of password characters\n+//               a-z ; A-Z ; 0-9 ; special characters list\n+//               allowable answers for questions [ , error message, allowable values]\n+//                 number of characters \n+//                 yes or not\n+//                 at least one of the types of characters\n+        \n+              \n+\n+\n+// how long a password - obtainAndValidate\n+//     reject bad answers\n+//         quit if necessary\n+// what are required characters\n+//     lowercase\n+//     uppercase\n+//     numbers?\n+//         reject bad answers\n+//             quit\n+//     special characters?\n+//         reject\n+//             quit\n+// generate password\n+//     set up parameters\n+//         length of password\n+//         requirements of password\n+//     fill in required characters first\n+//     fill in remaining characters using whole list\n+//     shuffle the array\n+// present password\n+    \n+// var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+//     if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+// var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+// window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+//     */\n+\n+\n+\n+// // Assignment code here\n+\n+// //     get criteria\n+// //     generate password\n+// var generatePassword = function() {\n+//   // fill in required characters first\n+//   //   fill in remaining characters using whole list\n+//   var generatedPassword = \"this is what we print\";\n+//   return generatedPassword;\n+// }\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637077561939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+var anarray = ['a','b','c','d','e']\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+// SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n+// subtract number of required from total\n+// fill those at random\n+// squeeze in required using splice\n+\n+            /*\n+          \n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    reject bad answers\n+        quit if necessary\n+what are required characters\n+    lowercase\n+    uppercase\n+    numbers?\n+        reject bad answers\n+            quit\n+    special characters?\n+        reject\n+            quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+    fill in required characters first\n+    fill in remaining characters using whole list\n+    shuffle the array\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637163911379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+// SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n+// subtract number of required from total\n+// fill those at random\n+// squeeze in required using splice\n+\n+            /*\n+          \n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637164527121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+// SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n+// subtract number of required from total\n+// fill those at random\n+// squeeze in required using splice\n+\n+            /*\n+          \n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637165260005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  let array = array.splice(randomIndex, 0, value);\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637165295663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  let characterSet = [];\n+  let passwordArray = [];\n+  let passwordString = \"\";\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  let array = array.splice(randomIndex, 0, value);\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637165388226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637165570227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+            BASIC VAR: arrays of password characters\n+              a-z ; A-Z ; 0-9 ; special characters list\n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637165903055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,118 +4,11 @@\n var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n \n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n \n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n var characterSet = [];\n var passwordArray = [];\n var passwordString = \"\";\n \n@@ -143,118 +36,10 @@\n   var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n   array = array.splice(randomIndex, 0, value);\n }\n \n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n+// \n \n-\n-            /*\n-          \n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  let characterSet = [];\n-  let passwordArray = [];\n-  let passwordString = \"\";\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  let array = array.splice(randomIndex, 0, value);\n-}\n-\n //obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n //    try to do one function that can handle number range, yes/no, and selected at least one?\n \n \n@@ -327,1878 +112,4 @@\n }\n \n // Add event listener to generate button\n generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  let array = array.splice(randomIndex, 0, value);\n-}\n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-// SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n-// subtract number of required from total\n-// fill those at random\n-// squeeze in required using splice\n-\n-            /*\n-          \n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-// SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n-// subtract number of required from total\n-// fill those at random\n-// squeeze in required using splice\n-\n-            /*\n-          \n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-// SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n-// subtract number of required from total\n-// fill those at random\n-// squeeze in required using splice\n-\n-            /*\n-          \n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-// //    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-// // SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n-// // subtract number of required from total\n-// // fill those at random\n-// // squeeze in required using splice\n-\n-//             /*\n-          \n-//             BASIC VAR: arrays of password characters\n-//               a-z ; A-Z ; 0-9 ; special characters list\n-//               allowable answers for questions [ , error message, allowable values]\n-//                 number of characters \n-//                 yes or not\n-//                 at least one of the types of characters\n-        \n-              \n-\n-\n-// how long a password - obtainAndValidate\n-//     reject bad answers\n-//         quit if necessary\n-// what are required characters\n-//     lowercase\n-//     uppercase\n-//     numbers?\n-//         reject bad answers\n-//             quit\n-//     special characters?\n-//         reject\n-//             quit\n-// generate password\n-//     set up parameters\n-//         length of password\n-//         requirements of password\n-//     fill in required characters first\n-//     fill in remaining characters using whole list\n-//     shuffle the array\n-// present password\n-    \n-// var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-//     if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-// var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-// window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-//     */\n-\n-\n-\n-// // Assignment code here\n-\n-// //     get criteria\n-// //     generate password\n-// var generatePassword = function() {\n-//   // fill in required characters first\n-//   //   fill in remaining characters using whole list\n-//   var generatedPassword = \"this is what we print\";\n-//   return generatedPassword;\n-// }\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-// SKIP FUNCTION - this adds required values into the target array and makes sure they don't get overwritten\n-// subtract number of required from total\n-// fill those at random\n-// squeeze in required using splice\n-\n-            /*\n-          \n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// function for pulling a value at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-                // get length of this array\n-                // get a random number based on length\n-                // pull from the array\n-            \n-            /*\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// function for pulling a value at random from an array\n-var getRandomElementFrom = function(array) {\n-  var lastElementValue = array.length - 1;\n-  var selectedValue = getRandomNumberFromTo(0, lastElementValue);\n-  return array[selectedValue];\n-}\n-                // get length of this array\n-                // get a random number based on length\n-                // pull from the array\n-            \n-            /*\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// function for pulling a value at random from an array\n-var getRandomElementFrom = function(array) {\n-  var lastElementValue = arrayLength(array) - 1;\n-  var selectedValue = getRandomNumberFromTo(0, lastElementValue);\n-  return array[selectedValue];\n-}\n-                // get length of this array\n-                // get a random number based on length\n-                // pull from the array\n-            \n-            /*\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = [a,b,c,d,e]\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// function for pulling a value at random from an array\n-var getRandomElementFrom = function(array) {\n-  var lastElementValue = arrayLength(array) - 1;\n-  var selectedValue = getRandomNumberFromTo(0, lastElementValue);\n-  return array[selectedValue];\n-}\n-                // get length of this array\n-                // get a random number based on length\n-                // pull from the array\n-            \n-            /*\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = [a,b,c,d,e]\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// function for pulling a value at random from an array\n-var getRandomElementFrom = function(array) {\n-  var lastElementValue = arrayLength(array) - 1;\n-  var selectedValue = getRandomNumberFromTo(0, lastElementValue);\n-  return array[selectedValue];\n-}\n-                // get length of this array\n-                // get a random number based on length\n-                // pull from the array\n-            \n-            /*\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-            /*\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.random();\n-  return x;\n-}            \n-\n-            /*\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-/* \t        \n-            BASIC UTILITY: generate random number between two numbers */\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.random();\n-  return x;\n-}            \n-\n-            /*\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-/* \t        \n-            BASIC UTILITY: generate random number between two numbers\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-/* \t        \n-            BASIC UTILITY: generate random number between two numbers\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword() {\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-/* \t        \n-            BASIC UTILITY: generate random number between two numbers\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword() {\n-  var generatedPassword = \"this is what we print\";\n-  return generatePassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-/* \t        \n-            BASIC UTILITY: generate random number between two numbers\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword() {\n-  var generatedPassword = \"this is what we print\";\n-  return(generatePassword);\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-/* \t        \n-            BASIC UTILITY: generate random number between two numbers\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-//     display password\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = \"password\"\n-  //generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-/* \t        \n-            BASIC UTILITY: generate random number between two numbers\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions\n-                number of characters\n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    lowercase\n-    uppercase\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-//     display password\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-/* \t        create array of required\n-            add required into each\n-              Fill remaining spots at random\n-            Scramble\n-            Fill slots sequentially\n-\n-            BASIC UTILITY: generate random number between two numbers\n-            function for pulling from list\n-                get length of this array\n-                get a random number based on length\n-                pull from the array\n-            function for shuffling\n-                set up array to be scrambled\n-                get a random number in length of array\n-                pull out that location in the array\n-                    send out that value\n-                    remove that value from the array\n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-            \n-welcome user\n-how long a password\n-    reject bad answers\n-        quit if necessary\n-what are required characters\n-    numbers?\n-        reject bad answers\n-            quit\n-    special characters?\n-        reject\n-            quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-    fill in required characters first\n-    fill in remaining characters using whole list\n-    shuffle the array\n-present password\n-    offer to copy to clipboard\n-ask whether another password is desired\n-    same parameters or different\n-    go back to start\n-    quit\n-\n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-\n-welcome user\n-while user wants password\n-    if criteria are needed\n-        get criteria\n-    generate password\n-    display password\n-    need another password?\n-good bye user\n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637192093441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  \n+}\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637192386147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+//   else {\n+//     if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+//       return \"n\";\n+//     }\n+//     else {\n+//       return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+//     }\n+// };\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637192508956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637193540443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if (x >= min && x <=max) && x == Math.round(x) {\n+    return \"x\";\n+  }\n+  else {\n+      return \"Please enter an integer between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+\n+\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637193609924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return \"x\";\n+  }\n+  else {\n+      return \"Please enter an integer between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+\n+\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637193712589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+      return \"Please enter an integer between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+\n+\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637193807698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+\n+\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637194229618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+var atLeastOneCharacterTypeSelected = function() {\n+  if () {\n+    return true;\n+  }\n+  else {\n+      return false;\n+    }\n+};\n+\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637200104192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+var anarray = ['a','b','c','d','e']\n+\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+var atLeastOneCharacterTypeSelected = function() {\n+  if (typesOfCharactersToInclude.includes(true)) {\n+    return true;\n+  }\n+  else {\n+      return false;\n+    }\n+};\n+\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637200494463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+var atLeastOneCharacterTypeSelected = function() {\n+  if (typesOfCharactersToInclude.includes(true)) {\n+    return true;\n+  }\n+  else {\n+    return false;\n+  }\n+};\n+\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637200538710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,149 @@\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+var atLeastOneCharacterTypeSelected = function() {\n+  if (typesOfCharactersToInclude.includes(true)) {\n+    return true;\n+  }\n+  else {\n+    return false;\n+  }\n+};\n+\n+// \n+\n+//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n+//    try to do one function that can handle number range, yes/no, and selected at least one?\n+\n+\n+            /*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+              \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637202546017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+var atLeastOneCharacterTypeSelected = function() {\n+  if (typesOfCharactersToInclude.includes(true)) {\n+    return true;\n+  }\n+  else {\n+    return false;\n+  }\n+};\n+\n+var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of 8; maximum of 128)');\n+\n+validateEntryNumberWithMinMax(8,128,promptNumberOfCharacters);\n+/*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+   \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637202737858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+const lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+var atLeastOneCharacterTypeSelected = function() {\n+  if (typesOfCharactersToInclude.includes(true)) {\n+    return true;\n+  }\n+  else {\n+    return false;\n+  }\n+};\n+\n+var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of 8; maximum of 128)');\n+\n+validateEntryNumberWithMinMax(8,128,promptNumberOfCharacters);\n+/*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+   \n+\n+\n+how long a password - obtainAndValidate\n+    validate or quit\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637203241099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+const lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+\n+// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n+var typesOfCharactersToInclude = [false,false,false,false];\n+\n+var passwordLength = 8;\n+\n+var characterSet = [];\n+var passwordArray = [];\n+var passwordString = \"\";\n+\n+var resetVariables = function() {\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  typesOfCharactersToInclude = [false,false,false,false];\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    passwordLength = x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+var atLeastOneCharacterTypeSelected = function() {\n+  if (typesOfCharactersToInclude.includes(true)) {\n+    return true;\n+  }\n+  else {\n+    return false;\n+  }\n+};\n+\n+var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of 8; maximum of 128)');\n+\n+validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,promptNumberOfCharacters);\n+\n+\n+/*\n+          \n+              allowable answers for questions [ , error message, allowable values]\n+                number of characters \n+                yes or not\n+                at least one of the types of characters\n+        \n+   \n+\n+\n+obtainValidPasswordLength\n+what are required characters\n+    lowercase\n+      validate or quit\n+      uppercase\n+      validate or quit\n+      numbers?\n+      validate or quit\n+      special characters?\n+      validate or quit\n+      at least one selected\n+       if not, go back to start or quit\n+generate password\n+    set up parameters\n+        length of password\n+        requirements of password\n+      fill in (length - required) characters using whole list\n+      splice in required characters at random locations\n+present password\n+    \n+var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+    if (promptFight === 'skip' || promptFight === 'SKIP') {\n+    \n+var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+\n+window.alert(\"This is an alert! JavaScript is running!\");\n+      \n+\n+    */\n+\n+\n+\n+// Assignment code here\n+\n+//     get criteria\n+//     generate password\n+var generatePassword = function() {\n+  // fill in required characters first\n+  //   fill in remaining characters using whole list\n+  var generatedPassword = \"this is what we print\";\n+  return generatedPassword;\n+}\n+  \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+\n+  passwordText.value = password;\n+\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637204611831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,45 +84,29 @@\n validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,promptNumberOfCharacters);\n \n \n /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-   \n-\n-\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                if (promptFight === 'skip' || promptFight === 'SKIP') {\n+                  \n+                  var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                  \n+                  \n obtainValidPasswordLength\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n+  while password length is not OK\n+    get password length\n+obtainTypesOfChars\n+  while typesofchars is not OK\n+    get types of chars\n+generatePassword\n     set up parameters\n         length of password\n         requirements of password\n       fill in (length - required) characters using whole list\n       splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n+presentPassword\n     */\n \n \n \n@@ -150,1947 +134,4 @@\n }\n \n // Add event listener to generate button\n generateBtn.addEventListener(\"click\", writePassword);\n-const lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-var atLeastOneCharacterTypeSelected = function() {\n-  if (typesOfCharactersToInclude.includes(true)) {\n-    return true;\n-  }\n-  else {\n-    return false;\n-  }\n-};\n-\n-var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of 8; maximum of 128)');\n-\n-validateEntryNumberWithMinMax(8,128,promptNumberOfCharacters);\n-/*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-   \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-var atLeastOneCharacterTypeSelected = function() {\n-  if (typesOfCharactersToInclude.includes(true)) {\n-    return true;\n-  }\n-  else {\n-    return false;\n-  }\n-};\n-\n-var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of 8; maximum of 128)');\n-\n-validateEntryNumberWithMinMax(8,128,promptNumberOfCharacters);\n-/*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-   \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-var atLeastOneCharacterTypeSelected = function() {\n-  if (typesOfCharactersToInclude.includes(true)) {\n-    return true;\n-  }\n-  else {\n-    return false;\n-  }\n-};\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-var atLeastOneCharacterTypeSelected = function() {\n-  if (typesOfCharactersToInclude.includes(true)) {\n-    return true;\n-  }\n-  else {\n-    return false;\n-  }\n-};\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-var atLeastOneCharacterTypeSelected = function() {\n-  if (typesOfCharactersToInclude.includes(true)) {\n-    return true;\n-  }\n-  else {\n-      return false;\n-    }\n-};\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-var atLeastOneCharacterTypeSelected = function() {\n-  if () {\n-    return true;\n-  }\n-  else {\n-      return false;\n-    }\n-};\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-      return \"Please enter an integer between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return \"x\";\n-  }\n-  else {\n-      return \"Please enter an integer between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if (x >= min && x <=max) && x == Math.round(x) {\n-    return \"x\";\n-  }\n-  else {\n-      return \"Please enter an integer between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-//   else {\n-//     if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-//       return \"n\";\n-//     }\n-//     else {\n-//       return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-//     }\n-// };\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  \n-}\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-var anarray = ['a','b','c','d','e']\n-\n-var lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-var upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-var numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-var specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n-\n-var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n-\n-var resetVariables = function() {\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// \n-\n-//obtainValidatedResponseOrQuit - uses allowable answers array to validate them\n-//    try to do one function that can handle number range, yes/no, and selected at least one?\n-\n-\n-            /*\n-          \n-            BASIC VAR: arrays of password characters\n-              a-z ; A-Z ; 0-9 ; special characters list\n-              allowable answers for questions [ , error message, allowable values]\n-                number of characters \n-                yes or not\n-                at least one of the types of characters\n-        \n-              \n-\n-\n-how long a password - obtainAndValidate\n-    validate or quit\n-what are required characters\n-    lowercase\n-      validate or quit\n-      uppercase\n-      validate or quit\n-      numbers?\n-      validate or quit\n-      special characters?\n-      validate or quit\n-      at least one selected\n-       if not, go back to start or quit\n-generate password\n-    set up parameters\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-present password\n-    \n-var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-    if (promptFight === 'skip' || promptFight === 'SKIP') {\n-    \n-var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-\n-window.alert(\"This is an alert! JavaScript is running!\");\n-      \n-\n-    */\n-\n-\n-\n-// Assignment code here\n-\n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n-  \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637204979942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,11 @@\n obtainTypesOfChars\n   while typesofchars is not OK\n     get types of chars\n generatePassword\n-    set up parameters\n+    set up big array\n+      fill it up except for any required\n+    splice random the required ones\n         length of password\n         requirements of password\n       fill in (length - required) characters using whole list\n       splice in required characters at random locations\n"
                },
                {
                    "date": 1637205858168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,21 +108,17 @@\n       fill in (length - required) characters using whole list\n       splice in required characters at random locations\n presentPassword\n     */\n+   \n+   var generatePassword = function() {\n+     var generatedPassword = \"this is what we print\";\n+     return generatedPassword;\n+   }\n \n \n-\n // Assignment code here\n \n-//     get criteria\n-//     generate password\n-var generatePassword = function() {\n-  // fill in required characters first\n-  //   fill in remaining characters using whole list\n-  var generatedPassword = \"this is what we print\";\n-  return generatedPassword;\n-}\n   \n // Get references to the #generate element\n var generateBtn = document.querySelector(\"#generate\");\n \n"
                },
                {
                    "date": 1637207222445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,12 @@\n \n \n // Assignment code here\n \n+// getPasswordLength;\n+// getTypesOfCharacters;\n+\n+\n   \n // Get references to the #generate element\n var generateBtn = document.querySelector(\"#generate\");\n \n"
                },
                {
                    "date": 1637208331099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n \n var passwordLength = 8;\n \n var characterSet = [];\n-var passwordArray = [];\n-var passwordString = \"\";\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // make empty later\n+var passwordString = \"\"; \n \n var resetVariables = function() {\n   characterSet = [];\n   passwordArray = [];\n@@ -109,20 +109,21 @@\n       splice in required characters at random locations\n presentPassword\n     */\n    \n-   var generatePassword = function() {\n-     var generatedPassword = \"this is what we print\";\n-     return generatedPassword;\n+  var generatePassword = function() {\n+//    fillPasswordArray();\n+    passwordString = passwordArray.join(\"\");\n+    return passwordString;\n    }\n \n \n // Assignment code here\n \n // getPasswordLength;\n // getTypesOfCharacters;\n+// generatePassword (needs to return the password)\n \n-\n   \n // Get references to the #generate element\n var generateBtn = document.querySelector(\"#generate\");\n \n"
                },
                {
                    "date": 1637208691496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,11 @@\n var characterSet = [];\n var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // make empty later\n var passwordString = \"\"; \n \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n var resetVariables = function() {\n   characterSet = [];\n   passwordArray = [];\n   passwordString = \"\";\n@@ -109,24 +112,21 @@\n       splice in required characters at random locations\n presentPassword\n     */\n    \n-  var generatePassword = function() {\n-//    fillPasswordArray();\n-    passwordString = passwordArray.join(\"\");\n-    return passwordString;\n-   }\n-\n-\n-// Assignment code here\n-\n-// getPasswordLength;\n-// getTypesOfCharacters;\n-// generatePassword (needs to return the password)\n-\n+   \n+   \n+   // Assignment code here\n+   \n+   // getPasswordLength;\n+   // getTypesOfCharacters;\n+   \n+   var generatePassword = function() {\n+ //    fillPasswordArray();\n+     passwordString = passwordArray.join(\"\");\n+     return passwordString;\n+    }\n   \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n \n // Write password to the #password input\n function writePassword() {\n   var password = generatePassword();\n"
                },
                {
                    "date": 1637250143283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const lowerCaseLetters = [ 'a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n \n"
                },
                {
                    "date": 1637250793507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,32 @@\n \n validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,promptNumberOfCharacters);\n \n \n+// Assignment code here\n+\n+// getPasswordLength;\n+// getTypesOfCharacters;\n+   \n+var generatePassword = function() {\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n /*\n                             var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n                 if (promptFight === 'skip' || promptFight === 'SKIP') {\n                   \n@@ -113,28 +137,5 @@\n presentPassword\n     */\n    \n    \n-   \n-   // Assignment code here\n-   \n-   // getPasswordLength;\n-   // getTypesOfCharacters;\n-   \n-   var generatePassword = function() {\n- //    fillPasswordArray();\n-     passwordString = passwordArray.join(\"\");\n-     return passwordString;\n-    }\n-  \n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-\n-  passwordText.value = password;\n-\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637251283827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,22 @@\n \n const minCharsInPassword = 8;\n const maxCharsInPassword = 128;\n \n+var lowerCaseLettersObject = {\n+  name: \"lower case letters\";\n+  includeInPassword: false;\n+  arrayOfCharacters: lowerCaseLetters;\n+}\n \n+var upperCaseLettersObject = {\n+  name: \"upper case letters\";\n+  includeInPassword: false;\n+  arrayOfCharacters: upperCaseLetters;\n+}\n+\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject];\n+\n // This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n var typesOfCharactersToInclude = [false,false,false,false];\n \n var passwordLength = 8;\n"
                },
                {
                    "date": 1637251397597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,17 +6,17 @@\n const minCharsInPassword = 8;\n const maxCharsInPassword = 128;\n \n var lowerCaseLettersObject = {\n-  name: \"lower case letters\";\n-  includeInPassword: false;\n-  arrayOfCharacters: lowerCaseLetters;\n+  name: \"lower case letters\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n }\n \n var upperCaseLettersObject = {\n-  name: \"upper case letters\";\n-  includeInPassword: false;\n-  arrayOfCharacters: upperCaseLetters;\n+  name: \"upper case letters\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n }\n \n var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject];\n \n"
                },
                {
                    "date": 1637251869363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,34 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n var lowerCaseLettersObject = {\n-  name: \"lower case letters\",\n+  name: \"lower case letter\",\n   includeInPassword: false,\n   arrayOfCharacters: lowerCaseLetters\n }\n-\n var upperCaseLettersObject = {\n-  name: \"upper case letters\",\n+  name: \"upper case letter\",\n   includeInPassword: false,\n   arrayOfCharacters: upperCaseLetters\n }\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n \n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject];\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n \n // This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n var typesOfCharactersToInclude = [false,false,false,false];\n \n"
                },
                {
                    "date": 1637252022357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,11 @@\n }\n \n var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n \n-// This array tracks which types to include as follows: lower case, upper case, numbers, and specials\n-var typesOfCharactersToInclude = [false,false,false,false];\n+var passwordLength = 8; // 8 is a placeholder; this value will be set by user\n \n-var passwordLength = 8;\n-\n-var characterSet = [];\n+var characterSet = []; // working array to use as source for password characters\n var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // make empty later\n var passwordString = \"\"; \n \n // Get references to the #generate element\n"
                },
                {
                    "date": 1637252299993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,10 @@\n var resetVariables = function() {\n   characterSet = [];\n   passwordArray = [];\n   passwordString = \"\";\n-  typesOfCharactersToInclude = [false,false,false,false];\n+  // TODO: fix this\n+  // typesOfCharactersToInclude = [false,false,false,false];\n }\n \n // generates random number between two numbers, inclusive\n var getRandomNumberFromTo = function(min, max) {\n"
                },
                {
                    "date": 1637252408136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n \n // Assignment code here\n \n // getPasswordLength;\n-// getTypesOfCharacters;\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n    \n var generatePassword = function() {\n  //    fillPasswordArray();\n  passwordString = passwordArray.join(\"\");\n"
                },
                {
                    "date": 1637258711964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n var passwordLength = 8; // 8 is a placeholder; this value will be set by user\n \n var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // make empty later\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n var passwordString = \"\"; \n \n // Get references to the #generate element\n var generateBtn = document.querySelector(\"#generate\");\n@@ -41,8 +41,11 @@\n var resetVariables = function() {\n   characterSet = [];\n   passwordArray = [];\n   passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n   // TODO: fix this\n   // typesOfCharactersToInclude = [false,false,false,false];\n }\n \n"
                },
                {
                    "date": 1637258765748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,8 @@\n   passwordString = \"\";\n   for (let i = 0; i < passwordSource.length; i++) {\n     passwordSource[i].includeInPassword = false;\n   }\n-  // TODO: fix this\n-  // typesOfCharactersToInclude = [false,false,false,false];\n }\n \n // generates random number between two numbers, inclusive\n var getRandomNumberFromTo = function(min, max) {\n"
                },
                {
                    "date": 1637259188615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n   var passwordText = document.querySelector(\"#password\");\n   \n   passwordText.value = password;\n   \n+  resetVariables;\n }\n \n // Add event listener to generate button\n generateBtn.addEventListener(\"click\", writePassword);\n@@ -140,23 +141,9 @@\n                   \n                   window.alert(\"This is an alert! JavaScript is running!\");\n                   \n                   \n-obtainValidPasswordLength\n-  while password length is not OK\n-    get password length\n-obtainTypesOfChars\n-  while typesofchars is not OK\n-    get types of chars\n-generatePassword\n-    set up big array\n-      fill it up except for any required\n-    splice random the required ones\n-        length of password\n-        requirements of password\n-      fill in (length - required) characters using whole list\n-      splice in required characters at random locations\n-presentPassword\n+\n     */\n    \n    \n    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637259270534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n   var passwordText = document.querySelector(\"#password\");\n   \n   passwordText.value = password;\n   \n-  resetVariables;\n+  resetVariables();\n }\n \n // Add event listener to generate button\n generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637261740303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n // Get references to the #generate element\n var generateBtn = document.querySelector(\"#generate\");\n \n var resetVariables = function() {\n+  passwordLength = 8;\n   characterSet = [];\n   passwordArray = [];\n   passwordString = \"\";\n   for (let i = 0; i < passwordSource.length; i++) {\n@@ -104,17 +105,21 @@\n };\n \n var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of 8; maximum of 128)');\n \n-validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,promptNumberOfCharacters);\n \n \n+\n // Assignment code here\n \n+var generatePassword = function() {\n // getPasswordLength;\n+  do {\n+    passwordLength = promptNumberOfCharacters;\n+    validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }\n+  while (!Number.isInteger(passwordLength);\n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n-   \n-var generatePassword = function() {\n  //    fillPasswordArray();\n  passwordString = passwordArray.join(\"\");\n  return passwordString;\n }\n@@ -126,9 +131,9 @@\n   var passwordText = document.querySelector(\"#password\");\n   \n   passwordText.value = password;\n   \n-  resetVariables();\n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n }\n \n // Add event listener to generate button\n generateBtn.addEventListener(\"click\", writePassword);\n"
                },
                {
                    "date": 1637331412910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = 8; // 8 is a placeholder; this value will be set by user\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = 8;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    passwordLength = x;\n+  }\n+  else {\n+      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  var atLeastOneCharacterTypeSelected = function() {\n+                                    if (typesOfCharactersToInclude.includes(true)) {\n+                                      return true;\n+                                    }\n+                                    else {\n+                                      return false;\n+                                    }\n+                                  };\n+\n+var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of ' minCharsInPassword '; maximum of ' maxCharsInPassword ')');\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  do {\n+    passwordLength = promptNumberOfCharacters;\n+    validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }\n+  while (!Number.isInteger(passwordLength);\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                if (promptFight === 'skip' || promptFight === 'SKIP') {\n+                  \n+                  var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n+                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                  \n+                  \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637332903032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  var atLeastOneCharacterTypeSelected = function() {\n+                                    if (typesOfCharactersToInclude.includes(true)) {\n+                                      return true;\n+                                    }\n+                                    else {\n+                                      return false;\n+                                    }\n+                                  };\n+\n+\n+var textForPromptNumberOfCharacters = 'Please indicate the number of characters needed for the password (minimum of ' minCharsInPassword '; maximum of ' maxCharsInPassword ')'\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637332977479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  var atLeastOneCharacterTypeSelected = function() {\n+                                    if (typesOfCharactersToInclude.includes(true)) {\n+                                      return true;\n+                                    }\n+                                    else {\n+                                      return false;\n+                                    }\n+                                  };\n+\n+\n+var textForPromptNumberOfCharacters = \"'Please indicate the number of characters needed for the password (minimum of ' minCharsInPassword '; maximum of ' maxCharsInPassword ')'\";\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637333104392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  debugger;\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  var atLeastOneCharacterTypeSelected = function() {\n+                                    if (typesOfCharactersToInclude.includes(true)) {\n+                                      return true;\n+                                    }\n+                                    else {\n+                                      return false;\n+                                    }\n+                                  };\n+\n+\n+var textForPromptNumberOfCharacters = \"'Please indicate the number of characters needed for the password (minimum of ' minCharsInPassword '; maximum of ' maxCharsInPassword ')'\";\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637333264000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  debugger;\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  var atLeastOneCharacterTypeSelected = function() {\n+                                    if (typesOfCharactersToInclude.includes(true)) {\n+                                      return true;\n+                                    }\n+                                    else {\n+                                      return false;\n+                                    }\n+                                  };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" minCharsInPassword \"; maximum of \" maxCharsInPassword \")\";\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637333314380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  debugger;\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  var atLeastOneCharacterTypeSelected = function() {\n+                                    if (typesOfCharactersToInclude.includes(true)) {\n+                                      return true;\n+                                    }\n+                                    else {\n+                                      return false;\n+                                    }\n+                                  };\n+\n+\n+var textForPromptNumberOfCharacters = (\"Please indicate the number of characters needed for the password (minimum of \" minCharsInPassword \"; maximum of \" maxCharsInPassword \")\");\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637333392197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  debugger;\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  var atLeastOneCharacterTypeSelected = function() {\n+                                    if (typesOfCharactersToInclude.includes(true)) {\n+                                      return true;\n+                                    }\n+                                    else {\n+                                      return false;\n+                                    }\n+                                  };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637333959179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  var atLeastOneCharacterTypeSelected = function() {\n+                                    if (typesOfCharactersToInclude.includes(true)) {\n+                                      return true;\n+                                    }\n+                                    else {\n+                                      return false;\n+                                    }\n+                                  };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637334868217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = \"password\"  //generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637335033114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = \"password\"  //generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637335095551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+debugger;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = \"password\"  //generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637335454514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+debugger;\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = \"password\"  //generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637335609355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = \"password\"  //generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+debugger;\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637335759798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+debugger;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+debugger;\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637335849341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+debugger;\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637335929841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637335961086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+debugger;\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637336053542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = \"password2\" //generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+debugger;\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637336179309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+}\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+debugger;\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637336252417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+debugger;\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637336491466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+// // getPasswordLength;\n+//   while (passwordLength == false) {\n+//     passwordLength = promptNumberOfCharacters;\n+//     passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+//   }  \n+// // getTypesOfCharacters; TODO: how many include in passwords do we have?\n+//  //    fillPasswordArray();\n+//  passwordString = passwordArray.join(\"\");\n+//  return passwordString;\n+return \"password3\";\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+debugger;\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637336704131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  debugger;\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = true; //promptNumberOfCharacters;\n+    // passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+//  passwordString = passwordArray.join(\"\");\n+//  return passwordString;\n+return \"password3\";\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637336832645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  debugger;\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = true; //promptNumberOfCharacters;\n+    // passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+//return \"password3\";\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637336949180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  debugger;\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters;\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637337028151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  debugger;\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters();\n+    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637337251904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  debugger;\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters();\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637337337817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+var promptNumberOfCharacters = function() {\n+  window.prompt(textForPromptNumberOfCharacters);\n+};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  debugger;\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = promptNumberOfCharacters();\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637337675322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+// var promptNumberOfCharacters = function() {\n+//   window.prompt(textForPromptNumberOfCharacters);\n+//};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  debugger;\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637337868190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,153 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n+\n+// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var upperCaseLettersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordString = \"\"; // this is the string for the outputted password\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splice in random location\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n+                                  // var atLeastOneCharacterTypeSelected = function() {\n+                                  //   if (typesOfCharactersToInclude.includes(true)) {\n+                                  //     return true;\n+                                  //   }\n+                                  //   else {\n+                                  //     return false;\n+                                  //   }\n+                                  // };\n+\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+// var promptNumberOfCharacters = function() {\n+//   window.prompt(textForPromptNumberOfCharacters);\n+//};\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  debugger;\n+// getPasswordLength;\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+ //    fillPasswordArray();\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+/*\n+                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n+                                  \n+                  window.alert(\"This is an alert! JavaScript is running!\");\n+                             \n+\n+    */\n+   \n+   \n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637349061264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,321 +116,31 @@\n // Assignment code here\n \n var generatePassword = function() {\n   debugger;\n-// getPasswordLength;\n+// intro statement to user;\n+  // getPasswordLength;\n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n+  while (numberOfTypesOfCharacters == 0) {\n+    // tell user what's coming up / error message if already been through (boolean var)\n+    // for all types of chars\n+      // get validated y or n\n+      // if y, increment number of required chars and update include that type\n   }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-// var promptNumberOfCharacters = function() {\n-//   window.prompt(textForPromptNumberOfCharacters);\n-//};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  debugger;\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n  //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n+    // for each type of char\n+      // if char is included\n+        // add that string to the pull-from string\n+    // for password length - number of required\n+      // pull values into the working string from the pull-from string\n+    // for each type of char\n+      // if char is included \n+        // splice in required chars\n \n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  debugger;\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters();\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n  passwordString = passwordArray.join(\"\");\n  return passwordString;\n };\n \n@@ -455,4087 +165,5 @@\n \n     */\n    \n    \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  debugger;\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters();\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  debugger;\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters();\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  debugger;\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  debugger;\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = true; //promptNumberOfCharacters;\n-    // passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-//return \"password3\";\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  debugger;\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = true; //promptNumberOfCharacters;\n-    // passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n-//  passwordString = passwordArray.join(\"\");\n-//  return passwordString;\n-return \"password3\";\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// // getPasswordLength;\n-//   while (passwordLength == false) {\n-//     passwordLength = promptNumberOfCharacters;\n-//     passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-//   }  \n-// // getTypesOfCharacters; TODO: how many include in passwords do we have?\n-//  //    fillPasswordArray();\n-//  passwordString = passwordArray.join(\"\");\n-//  return passwordString;\n-return \"password3\";\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-debugger;\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-debugger;\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-debugger;\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = \"password2\" //generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-debugger;\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-debugger;\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-debugger;\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-debugger;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-debugger;\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = \"password\"  //generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-debugger;\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-debugger;\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = function() {\n-  window.prompt(textForPromptNumberOfCharacters);\n-};\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = \"password\"  //generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-debugger;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = \"password\"  //generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = \"password\"  //generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = \"password\"  //generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  var atLeastOneCharacterTypeSelected = function() {\n-                                    if (typesOfCharactersToInclude.includes(true)) {\n-                                      return true;\n-                                    }\n-                                    else {\n-                                      return false;\n-                                    }\n-                                  };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  debugger;\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  var atLeastOneCharacterTypeSelected = function() {\n-                                    if (typesOfCharactersToInclude.includes(true)) {\n-                                      return true;\n-                                    }\n-                                    else {\n-                                      return false;\n-                                    }\n-                                  };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  debugger;\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  var atLeastOneCharacterTypeSelected = function() {\n-                                    if (typesOfCharactersToInclude.includes(true)) {\n-                                      return true;\n-                                    }\n-                                    else {\n-                                      return false;\n-                                    }\n-                                  };\n-\n-\n-var textForPromptNumberOfCharacters = (\"Please indicate the number of characters needed for the password (minimum of \" minCharsInPassword \"; maximum of \" maxCharsInPassword \")\");\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  debugger;\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  var atLeastOneCharacterTypeSelected = function() {\n-                                    if (typesOfCharactersToInclude.includes(true)) {\n-                                      return true;\n-                                    }\n-                                    else {\n-                                      return false;\n-                                    }\n-                                  };\n-\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" minCharsInPassword \"; maximum of \" maxCharsInPassword \")\";\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  debugger;\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  var atLeastOneCharacterTypeSelected = function() {\n-                                    if (typesOfCharactersToInclude.includes(true)) {\n-                                      return true;\n-                                    }\n-                                    else {\n-                                      return false;\n-                                    }\n-                                  };\n-\n-\n-var textForPromptNumberOfCharacters = \"'Please indicate the number of characters needed for the password (minimum of ' minCharsInPassword '; maximum of ' maxCharsInPassword ')'\";\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  var atLeastOneCharacterTypeSelected = function() {\n-                                    if (typesOfCharactersToInclude.includes(true)) {\n-                                      return true;\n-                                    }\n-                                    else {\n-                                      return false;\n-                                    }\n-                                  };\n-\n-\n-var textForPromptNumberOfCharacters = \"'Please indicate the number of characters needed for the password (minimum of ' minCharsInPassword '; maximum of ' maxCharsInPassword ')'\";\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  var atLeastOneCharacterTypeSelected = function() {\n-                                    if (typesOfCharactersToInclude.includes(true)) {\n-                                      return true;\n-                                    }\n-                                    else {\n-                                      return false;\n-                                    }\n-                                  };\n-\n-\n-var textForPromptNumberOfCharacters = 'Please indicate the number of characters needed for the password (minimum of ' minCharsInPassword '; maximum of ' maxCharsInPassword ')'\n-\n-var promptNumberOfCharacters = window.prompt(textForPromptNumberOfCharacters);\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = promptNumberOfCharacters;\n-    passwordLength = validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }  \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = 8; // 8 is a placeholder; this value will be set by user\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = 8;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    passwordLength = x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  var atLeastOneCharacterTypeSelected = function() {\n-                                    if (typesOfCharactersToInclude.includes(true)) {\n-                                      return true;\n-                                    }\n-                                    else {\n-                                      return false;\n-                                    }\n-                                  };\n-\n-var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of ' minCharsInPassword '; maximum of ' maxCharsInPassword ')');\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  do {\n-    passwordLength = promptNumberOfCharacters;\n-    validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }\n-  while (!Number.isInteger(passwordLength);\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                if (promptFight === 'skip' || promptFight === 'SKIP') {\n-                  \n-                  var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                  \n-                  \n-\n-    */\n-   \n-   \n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var upperCaseLettersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n-\n-var passwordLength = 8; // 8 is a placeholder; this value will be set by user\n-\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n-var passwordString = \"\"; \n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-var resetVariables = function() {\n-  passwordLength = 8;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splice in random location\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    passwordLength = x;\n-  }\n-  else {\n-      return \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    }\n-};\n-\n-// using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-var atLeastOneCharacterTypeSelected = function() {\n-  if (typesOfCharactersToInclude.includes(true)) {\n-    return true;\n-  }\n-  else {\n-    return false;\n-  }\n-};\n-\n-var promptNumberOfCharacters = window.prompt('Please indicate the number of characters needed for the password (minimum of 8; maximum of 128)');\n-\n-\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-// getPasswordLength;\n-  do {\n-    passwordLength = promptNumberOfCharacters;\n-    validateEntryNumberWithMinMax(minCharsInPassword,maxCharsInPassword,passwordLength);\n-  }\n-  while (!Number.isInteger(passwordLength);\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n- //    fillPasswordArray();\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-}\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                if (promptFight === 'skip' || promptFight === 'SKIP') {\n-                  \n-                  var enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n-                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                  \n-                  \n-\n-    */\n-   \n-   \n    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637349817436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,18 +115,27 @@\n \n // Assignment code here\n \n var generatePassword = function() {\n-  debugger;\n+\n // intro statement to user;\n   // getPasswordLength;\n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n   while (numberOfTypesOfCharacters == 0) {\n-    // tell user what's coming up / error message if already been through (boolean var)\n+    var firstTime = true;\n+    // message to user about what's coming up / error message if they've already tried before\n+    debugger;\n+    if (firstTime) {\n+      window.alert(\"You have a choice of types of characters to include in your password; you must include at least one type!\");\n+      firstTime = false;\n+    } else {\n+      window.alert(\"Please include at least one type of character in your password!\");\n+    };\n+    \n     // for all types of chars\n       // get validated y or n\n       // if y, increment number of required chars and update include that type\n   }\n"
                },
                {
                    "date": 1637349930121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n   if ((x >= min && x <=max) && x == Math.round(x)) {\n     return x;\n   }\n   else {\n-    textForPromptNumberOfCharacters = \"Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n     return false;\n   }\n };\n \n"
                },
                {
                    "date": 1637350045860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     var firstTime = true;\n     // message to user about what's coming up / error message if they've already tried before\n     debugger;\n     if (firstTime) {\n-      window.alert(\"You have a choice of types of characters to include in your password; you must include at least one type!\");\n+      window.alert(\"Next you will choose types of characters to include in your password; you must include at least one type!\");\n       firstTime = false;\n     } else {\n       window.alert(\"Please include at least one type of character in your password!\");\n     };\n"
                },
                {
                    "date": 1637350147002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,10 +123,10 @@\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n+  var firstTime = true;\n   while (numberOfTypesOfCharacters == 0) {\n-    var firstTime = true;\n     // message to user about what's coming up / error message if they've already tried before\n     debugger;\n     if (firstTime) {\n       window.alert(\"Next you will choose types of characters to include in your password; you must include at least one type!\");\n"
                },
                {
                    "date": 1637351514777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,21 +123,33 @@\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n+debugger;\n   var firstTime = true;\n   while (numberOfTypesOfCharacters == 0) {\n     // message to user about what's coming up / error message if they've already tried before\n-    debugger;\n     if (firstTime) {\n       window.alert(\"Next you will choose types of characters to include in your password; you must include at least one type!\");\n       firstTime = false;\n     } else {\n       window.alert(\"Please include at least one type of character in your password!\");\n     };\n     \n     // for all types of chars\n-      // get validated y or n\n+    var textToPromptTypeOfCharacter = null;\n+    var typeChoice = null;\n+    for (i = 0, i < passwordSource.length, i++) {\n+      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource.name + \"s in your password?\"\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      typeChoice = validateEntryYorN(typeChoice);\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+    \n+    // get validated y or n\n       // if y, increment number of required chars and update include that type\n   }\n  //    fillPasswordArray();\n     // for each type of char\n"
                },
                {
                    "date": 1637351642656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     \n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n     var typeChoice = null;\n-    for (i = 0, i < passwordSource.length, i++) {\n+    for (i = 0; i < passwordSource.length; i++ ) {\n       textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource.name + \"s in your password?\"\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n       typeChoice = validateEntryYorN(typeChoice);\n       if (typeChoice == \"y\") {\n"
                },
                {
                    "date": 1637351844595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n     var typeChoice = null;\n     for (i = 0; i < passwordSource.length; i++ ) {\n-      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource.name + \"s in your password?\"\n+      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name + \"s in your password?\"\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n       typeChoice = validateEntryYorN(typeChoice);\n       if (typeChoice == \"y\") {\n         passwordSource[i].includeInPassword = true;\n"
                },
                {
                    "date": 1637352198750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n     if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n       return \"n\";\n     }\n     else {\n-      return \"Please enter either \\\"Y\\\" or \\\"N\\\"\";\n+      return false;\n     }\n   }\n };\n \n@@ -136,17 +136,19 @@\n     };\n     \n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n-    var typeChoice = null;\n+    var typeChoice = false;\n     for (i = 0; i < passwordSource.length; i++ ) {\n-      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name + \"s in your password?\"\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      typeChoice = validateEntryYorN(typeChoice);\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n+      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name + \"s in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+      while (typeChoice == false) {\n+        typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+        typeChoice = validateEntryYorN(typeChoice);\n+        if (typeChoice == \"y\") {\n+          passwordSource[i].includeInPassword = true;\n+          numberOfTypesOfCharacters++;\n+        };\n+      }\n     }\n     \n     // get validated y or n\n       // if y, increment number of required chars and update include that type\n"
                },
                {
                    "date": 1637352618276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,11 +136,11 @@\n     };\n     \n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n-    var typeChoice = false;\n     for (i = 0; i < passwordSource.length; i++ ) {\n       textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name + \"s in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+      var typeChoice = false;\n       while (typeChoice == false) {\n         typeChoice = window.prompt(textToPromptTypeOfCharacter);\n         typeChoice = validateEntryYorN(typeChoice);\n         if (typeChoice == \"y\") {\n"
                },
                {
                    "date": 1637352840735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     \n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n     for (i = 0; i < passwordSource.length; i++ ) {\n-      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name + \"s in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n       var typeChoice = false;\n       while (typeChoice == false) {\n         typeChoice = window.prompt(textToPromptTypeOfCharacter);\n         typeChoice = validateEntryYorN(typeChoice);\n"
                },
                {
                    "date": 1637352970773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,12 +118,16 @@\n var generatePassword = function() {\n \n // intro statement to user;\n   // getPasswordLength;\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n+\n+// XXXXXXXXXXXXXXXXXXXX\n+//   while (passwordLength == false) {\n+//     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+//     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+//   }  \n+\n+\n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n debugger;\n   var firstTime = true;\n   while (numberOfTypesOfCharacters == 0) {\n"
                },
                {
                    "date": 1637356007517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n     \n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n     for (i = 0; i < passwordSource.length; i++ ) {\n-      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n       var typeChoice = false;\n       while (typeChoice == false) {\n         typeChoice = window.prompt(textToPromptTypeOfCharacter);\n         typeChoice = validateEntryYorN(typeChoice);\n"
                },
                {
                    "date": 1637356853289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n     for (i = 0; i < passwordSource.length; i++ ) {\n       textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-      var typeChoice = false;\n+      var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n       while (typeChoice == false) {\n         typeChoice = window.prompt(textToPromptTypeOfCharacter);\n         typeChoice = validateEntryYorN(typeChoice);\n         if (typeChoice == \"y\") {\n"
                },
                {
                    "date": 1637357079243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,10 @@\n     \n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n     for (i = 0; i < passwordSource.length; i++ ) {\n-      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+      var nameOfTypeCapitalized = passwordSource[i].name.toUpperCase()\n+      textToPromptTypeOfCharacter = \"Would you like to include \" + nameOfTypeCapitalized + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n       var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n       while (typeChoice == false) {\n         typeChoice = window.prompt(textToPromptTypeOfCharacter);\n         typeChoice = validateEntryYorN(typeChoice);\n"
                },
                {
                    "date": 1637357243295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   includeInPassword: false,\n   arrayOfCharacters: numbersZeroToNine\n }\n var upperCaseLettersObject = {\n-  name: \"special character\",\n+  name: \"special??? character\",\n   includeInPassword: false,\n   arrayOfCharacters: specialCharacters\n }\n var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n"
                },
                {
                    "date": 1637357345814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,14 +20,14 @@\n   name: \"number\",\n   includeInPassword: false,\n   arrayOfCharacters: numbersZeroToNine\n }\n-var upperCaseLettersObject = {\n-  name: \"special??? character\",\n+var specialCharactersObject = {\n+  name: \"special character\",\n   includeInPassword: false,\n   arrayOfCharacters: specialCharacters\n }\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, upperCaseLettersObject];\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n \n var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n var characterSet = []; // working array to use as source for password characters\n"
                },
                {
                    "date": 1637357393924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,10 +141,9 @@\n     \n     // for all types of chars\n     var textToPromptTypeOfCharacter = null;\n     for (i = 0; i < passwordSource.length; i++ ) {\n-      var nameOfTypeCapitalized = passwordSource[i].name.toUpperCase()\n-      textToPromptTypeOfCharacter = \"Would you like to include \" + nameOfTypeCapitalized + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n       var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n       while (typeChoice == false) {\n         typeChoice = window.prompt(textToPromptTypeOfCharacter);\n         typeChoice = validateEntryYorN(typeChoice);\n"
                },
                {
                    "date": 1637357759509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n     if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n       return \"n\";\n     }\n     else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n       return false;\n     }\n   }\n };\n"
                },
                {
                    "date": 1637359122712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,23 +146,28 @@\n       textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n       var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n       while (typeChoice == false) {\n         typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+        // get validated y or n\n         typeChoice = validateEntryYorN(typeChoice);\n+        // if y, increment number of required chars and update include that type\n         if (typeChoice == \"y\") {\n           passwordSource[i].includeInPassword = true;\n           numberOfTypesOfCharacters++;\n         };\n       }\n     }\n     \n-    // get validated y or n\n-      // if y, increment number of required chars and update include that type\n   }\n  //    fillPasswordArray();\n-    // for each type of char\n-      // if char is included\n-        // add that string to the pull-from string\n+ // for each type of char\n+ for (i = 0; i < passwordSource.length; i++ ) {\n+   // if char is included\n+    if (passwordSource[i].includeInPassword == true) {\n+      characterSet = passwordSource[i].arrayOfCharacters;\n+    }\n+   // add that string to the pull-from string\n+  }\n     // for password length - number of required\n       // pull values into the working string from the pull-from string\n     // for each type of char\n       // if char is included \n"
                },
                {
                    "date": 1637359345619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,43 +128,43 @@\n //   }  \n \n \n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n-debugger;\n-  var firstTime = true;\n-  while (numberOfTypesOfCharacters == 0) {\n-    // message to user about what's coming up / error message if they've already tried before\n-    if (firstTime) {\n-      window.alert(\"Next you will choose types of characters to include in your password; you must include at least one type!\");\n-      firstTime = false;\n-    } else {\n-      window.alert(\"Please include at least one type of character in your password!\");\n-    };\n-    \n-    // for all types of chars\n-    var textToPromptTypeOfCharacter = null;\n-    for (i = 0; i < passwordSource.length; i++ ) {\n-      textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-      var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-      while (typeChoice == false) {\n-        typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-        // get validated y or n\n-        typeChoice = validateEntryYorN(typeChoice);\n-        // if y, increment number of required chars and update include that type\n-        if (typeChoice == \"y\") {\n-          passwordSource[i].includeInPassword = true;\n-          numberOfTypesOfCharacters++;\n-        };\n-      }\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next you will choose types of characters to include in your password; you must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n     }\n-    \n   }\n+  \n+}\n+debugger;\n  //    fillPasswordArray();\n  // for each type of char\n  for (i = 0; i < passwordSource.length; i++ ) {\n    // if char is included\n     if (passwordSource[i].includeInPassword == true) {\n-      characterSet = passwordSource[i].arrayOfCharacters;\n+      characterSet = concat(characterSet, passwordSource[i].arrayOfCharacters);\n     }\n    // add that string to the pull-from string\n   }\n     // for password length - number of required\n"
                },
                {
                    "date": 1637360118940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n  // for each type of char\n  for (i = 0; i < passwordSource.length; i++ ) {\n    // if char is included\n     if (passwordSource[i].includeInPassword == true) {\n-      characterSet = concat(characterSet, passwordSource[i].arrayOfCharacters);\n+      characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n     }\n    // add that string to the pull-from string\n   }\n     // for password length - number of required\n"
                },
                {
                    "date": 1637360240868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,13 +162,14 @@\n  // for each type of char\n  for (i = 0; i < passwordSource.length; i++ ) {\n    // if char is included\n     if (passwordSource[i].includeInPassword == true) {\n+      // add that string to the pull-from string\n       characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n     }\n-   // add that string to the pull-from string\n   }\n-    // for password length - number of required\n+   \n+  // for password length - number of required\n       // pull values into the working string from the pull-from string\n     // for each type of char\n       // if char is included \n         // splice in required chars\n"
                },
                {
                    "date": 1637361128023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,15 +165,19 @@\n     if (passwordSource[i].includeInPassword == true) {\n       // add that string to the pull-from string\n       characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n     }\n-  }\n+  };\n    \n   // for password length - number of required\n-      // pull values into the working string from the pull-from string\n+  for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+\n+    // pull values into the working string from the pull-from string\n+    passwordArray.push(getRandomElementFromArray(passwordSource));\n+  };\n     // for each type of char\n-      // if char is included \n-        // splice in required chars\n+    // if char is included \n+    // splice in required chars\n \n  passwordString = passwordArray.join(\"\");\n  return passwordString;\n };\n"
                },
                {
                    "date": 1637361257249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n   // for password length - number of required\n   for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n \n     // pull values into the working string from the pull-from string\n-    passwordArray.push(getRandomElementFromArray(passwordSource));\n+    passwordArray.push(getRandomElementFromArray(characterSet));\n   };\n     // for each type of char\n     // if char is included \n     // splice in required chars\n"
                },
                {
                    "date": 1637361527991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,19 +156,19 @@\n     }\n   }\n   \n }\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n debugger;\n- //    fillPasswordArray();\n- // for each type of char\n- for (i = 0; i < passwordSource.length; i++ ) {\n-   // if char is included\n-    if (passwordSource[i].includeInPassword == true) {\n-      // add that string to the pull-from string\n-      characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-    }\n-  };\n-   \n   // for password length - number of required\n   for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n \n     // pull values into the working string from the pull-from string\n"
                },
                {
                    "date": 1637361667539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // Get references to the #generate element\n var generateBtn = document.querySelector(\"#generate\");\n \n var resetVariables = function() {\n-  passwordLength = false;\n+  passwordLength = 10;  //reset to false\n   characterSet = [];\n   passwordArray = [];\n   passwordString = \"\";\n   for (let i = 0; i < passwordSource.length; i++) {\n@@ -120,9 +120,9 @@\n \n // intro statement to user;\n   // getPasswordLength;\n \n-// XXXXXXXXXXXXXXXXXXXX\n+// XXXXXXXXXXXXXXXXXXXX reset passwordLength to false\n //   while (passwordLength == false) {\n //     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n //     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n //   }  \n"
                },
                {
                    "date": 1637365944993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,10 @@\n   arrayOfCharacters: specialCharacters\n }\n var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n \n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+// TODO reset passwordLength to false\n+var passwordLength = 10; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n var characterSet = []; // working array to use as source for password characters\n var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n var passwordString = \"\"; // this is the string for the outputted password\n@@ -37,9 +38,9 @@\n // Get references to the #generate element\n var generateBtn = document.querySelector(\"#generate\");\n \n var resetVariables = function() {\n-  passwordLength = 10;  //reset to false\n+  passwordLength = false;\n   characterSet = [];\n   passwordArray = [];\n   passwordString = \"\";\n   for (let i = 0; i < passwordSource.length; i++) {\n"
                },
                {
                    "date": 1637366145035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n // TODO reset passwordLength to false\n var passwordLength = 10; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n var characterSet = []; // working array to use as source for password characters\n-var passwordArray = [\"t\", \"e\", \"s\", \"t\"]; // TODO make empty later // working array to hold randomly-selected password characters\n+var passwordArray = []; // working array to hold randomly-selected password characters\n var passwordString = \"\"; // this is the string for the outputted password\n \n // Get references to the #generate element\n var generateBtn = document.querySelector(\"#generate\");\n"
                },
                {
                    "date": 1637366814830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,18 +167,24 @@\n     characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n   }\n };\n \n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n debugger;\n-  // for password length - number of required\n-  for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n \n-    // pull values into the working string from the pull-from string\n-    passwordArray.push(getRandomElementFromArray(characterSet));\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n   };\n-    // for each type of char\n-    // if char is included \n-    // splice in required chars\n+}\n \n  passwordString = passwordArray.join(\"\");\n  return passwordString;\n };\n"
                },
                {
                    "date": 1637367269443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n var firstTime = true;\n while (numberOfTypesOfCharacters == 0) {\n   // message to user about what's coming up / error message if they've already tried before\n   if (firstTime) {\n-    window.alert(\"Next you will choose types of characters to include in your password; you must include at least one type!\");\n+    window.alert(\"Next please choose types of characters to include in your password; you must include at least one type!\");\n     firstTime = false;\n   } else {\n     window.alert(\"Please include at least one type of character in your password!\");\n   };\n"
                },
                {
                    "date": 1637367375362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n }\n var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n \n // TODO reset passwordLength to false\n-var passwordLength = 10; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n var characterSet = []; // working array to use as source for password characters\n var passwordArray = []; // working array to hold randomly-selected password characters\n var passwordString = \"\"; // this is the string for the outputted password\n@@ -121,13 +121,12 @@\n \n // intro statement to user;\n   // getPasswordLength;\n \n-// XXXXXXXXXXXXXXXXXXXX reset passwordLength to false\n-//   while (passwordLength == false) {\n-//     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-//     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-//   }  \n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n \n \n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n var firstTime = true;\n"
                },
                {
                    "date": 1637367452601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n   var passwordText = document.querySelector(\"#password\");\n   \n   passwordText.value = password;\n   \n-  //resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n }\n // Add event listener to generate button\n generateBtn.addEventListener(\"click\", writePassword);\n \n"
                },
                {
                    "date": 1637367595102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n var generateBtn = document.querySelector(\"#generate\");\n \n var resetVariables = function() {\n   passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n   characterSet = [];\n   passwordArray = [];\n   passwordString = \"\";\n   for (let i = 0; i < passwordSource.length; i++) {\n"
                },
                {
                    "date": 1637367852247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,6 +209,6 @@\n                              \n \n     */\n    \n-   \n+   // do you want the same settings as last time?\n    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637369238094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n \n-// objects and array of these objects to allow \"for\" loops to be used for creating the password\n+// character type objects\n var lowerCaseLettersObject = {\n   name: \"lower case letter\",\n   includeInPassword: false,\n   arrayOfCharacters: lowerCaseLetters\n@@ -25,20 +25,17 @@\n   name: \"special character\",\n   includeInPassword: false,\n   arrayOfCharacters: specialCharacters\n }\n+//array of character-type objects; this allows \"for\" loops to be used\n var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n \n-// TODO reset passwordLength to false\n var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold randomly-selected password characters\n-var passwordString = \"\"; // this is the string for the outputted password\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n \n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n var resetVariables = function() {\n   passwordLength = false;\n   numberOfTypesOfCharacters = 0;\n   characterSet = [];\n@@ -48,8 +45,11 @@\n     passwordSource[i].includeInPassword = false;\n   }\n }\n \n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n // generates random number between two numbers, inclusive\n var getRandomNumberFromTo = function(min, max) {\n   var x = Math.floor(Math.random() * (max - min + 1) + min);\n   return x;\n@@ -61,9 +61,9 @@\n   var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n   return array[randomIndex];\n }\n \n-// splice in random location\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n var spliceValueAtRandomIndex = function(value, array) {\n   var lastElementIndex = array.length - 1;\n   var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n   array = array.splice(randomIndex, 0, value);\n@@ -98,25 +98,10 @@\n };\n \n // TODO add response to cancel choice\n \n-                                  // using the typesOfCharactersToInclude global variable arraty, validates at least one character type has been included for the password generator\n-                                  // var atLeastOneCharacterTypeSelected = function() {\n-                                  //   if (typesOfCharactersToInclude.includes(true)) {\n-                                  //     return true;\n-                                  //   }\n-                                  //   else {\n-                                  //     return false;\n-                                  //   }\n-                                  // };\n-\n-\n var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n \n-// var promptNumberOfCharacters = function() {\n-//   window.prompt(textForPromptNumberOfCharacters);\n-//};\n-\n // Assignment code here\n \n var generatePassword = function() {\n \n@@ -124,8 +109,9 @@\n   // getPasswordLength;\n \n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n \n \n@@ -146,8 +132,9 @@\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n     while (typeChoice == false) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n       // get validated y or n\n       typeChoice = validateEntryYorN(typeChoice);\n       // if y, increment number of required chars and update include that type\n       if (typeChoice == \"y\") {\n"
                },
                {
                    "date": 1637369283763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,14 +188,7 @@\n }\n // Add event listener to generate button\n generateBtn.addEventListener(\"click\", writePassword);\n \n-/*\n-                            var promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n-                                  \n-                  window.alert(\"This is an alert! JavaScript is running!\");\n-                             \n-\n-    */\n    \n    // do you want the same settings as last time?\n    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637417217242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+\n+// intro statement to user;\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next please choose types of characters to include in your password; you must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637418135361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+\n+// intro statement to user;\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637418540831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637418800318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+\n+  passwordText.value = \"\"; // added to clear password window if one has already been provided and user wants another one\n+\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637418933184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+\n+  passwordText.value = null; // added to clear password window if one has already been provided and user wants another one\n+\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637419003632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+\n+  // passwordText.value = null; // added to clear password window if one has already been provided and user wants another one\n+\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637419480439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+\n+  passwordText.value = \" \"; // added to clear password window if one has already been provided and user wants another one\n+\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637419855938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+\n+  //passwordText.value = \" \"; // added to clear password window if one has already been provided and user wants another one\n+\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637420428037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,197 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate element\n+var generateBtn = document.querySelector(\"#generate\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    // if return null - cancel\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+      // if return null - cancel\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+      // if y, increment number of required chars and update include that type\n+      if (typeChoice == \"y\") {\n+        passwordSource[i].includeInPassword = true;\n+        numberOfTypesOfCharacters++;\n+      };\n+    }\n+  }\n+  \n+}\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+debugger;\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+ passwordString = passwordArray.join(\"\");\n+ return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+\n+  //passwordText.value = \" \"; // added to clear password window if one has already been provided and user wants another one\n+\n+  var password = generatePassword();\n+  var passwordText = document.querySelector(\"#password\");\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+}\n+// Add event listener to generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n+\n+   \n+   // do you want the same settings as last time?\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637420571029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,11 @@\n     passwordSource[i].includeInPassword = false;\n   }\n }\n \n-// Get references to the #generate element\n+// Get references to the #generate button and #password textarea\n var generateBtn = document.querySelector(\"#generate\");\n+var passwordText = document.querySelector(\"#password\");\n \n // generates random number between two numbers, inclusive\n var getRandomNumberFromTo = function(min, max) {\n   var x = Math.floor(Math.random() * (max - min + 1) + min);\n@@ -182,9 +183,8 @@\n \n   //passwordText.value = \" \"; // added to clear password window if one has already been provided and user wants another one\n \n   var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n   \n   passwordText.value = password;\n   \n   resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n@@ -193,1766 +193,5 @@\n generateBtn.addEventListener(\"click\", writePassword);\n \n    \n    // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  \n-  // intro statement to user;\n-  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-\n-  //passwordText.value = \" \"; // added to clear password window if one has already been provided and user wants another one\n-\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  \n-  // intro statement to user;\n-  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-\n-  passwordText.value = \" \"; // added to clear password window if one has already been provided and user wants another one\n-\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  \n-  // intro statement to user;\n-  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-\n-  // passwordText.value = null; // added to clear password window if one has already been provided and user wants another one\n-\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  \n-  // intro statement to user;\n-  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-\n-  passwordText.value = null; // added to clear password window if one has already been provided and user wants another one\n-\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  \n-  // intro statement to user;\n-  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-\n-  passwordText.value = \"\"; // added to clear password window if one has already been provided and user wants another one\n-\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-  \n-  // intro statement to user;\n-  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-\n-// intro statement to user;\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-\n-// intro statement to user;\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next please choose types of characters to include in your password; you must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n-   \n-const minCharsInPassword = 8;\n-const maxCharsInPassword = 128;\n-const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n-const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n-const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n-const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_'];\n-\n-// character type objects\n-var lowerCaseLettersObject = {\n-  name: \"lower case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: lowerCaseLetters\n-}\n-var upperCaseLettersObject = {\n-  name: \"upper case letter\",\n-  includeInPassword: false,\n-  arrayOfCharacters: upperCaseLetters\n-}\n-var numbersZeroToNineObject = {\n-  name: \"number\",\n-  includeInPassword: false,\n-  arrayOfCharacters: numbersZeroToNine\n-}\n-var specialCharactersObject = {\n-  name: \"special character\",\n-  includeInPassword: false,\n-  arrayOfCharacters: specialCharacters\n-}\n-//array of character-type objects; this allows \"for\" loops to be used\n-var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n-\n-var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n-var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n-var characterSet = []; // working array to use as source for password characters\n-var passwordArray = []; // working array to hold the password characters as they are generated\n-var passwordString = \"\"; // this is the string for the password output\n-\n-var resetVariables = function() {\n-  passwordLength = false;\n-  numberOfTypesOfCharacters = 0;\n-  characterSet = [];\n-  passwordArray = [];\n-  passwordString = \"\";\n-  for (let i = 0; i < passwordSource.length; i++) {\n-    passwordSource[i].includeInPassword = false;\n-  }\n-}\n-\n-// Get references to the #generate element\n-var generateBtn = document.querySelector(\"#generate\");\n-\n-// generates random number between two numbers, inclusive\n-var getRandomNumberFromTo = function(min, max) {\n-  var x = Math.floor(Math.random() * (max - min + 1) + min);\n-  return x;\n-}            \n-\n-// pulls an element at random from an array\n-var getRandomElementFromArray = function(array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  return array[randomIndex];\n-}\n-\n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n-var spliceValueAtRandomIndex = function(value, array) {\n-  var lastElementIndex = array.length - 1;\n-  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n-  array = array.splice(randomIndex, 0, value);\n-}\n-\n-// validates \"y\" or \"n\" entry, returns error message otherwise\n-var validateEntryYorN = function(string) {\n-  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n-    return \"y\";\n-  }\n-  else {\n-    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n-      return \"n\";\n-    }\n-    else {\n-      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n-      return false;\n-    }\n-  }\n-};\n-\n-// validates entry is an integer within a min/max range, returns error message otherwise\n-var validateEntryNumberWithMinMax = function(string, min, max) {\n-  var x = Number(string);\n-  if ((x >= min && x <=max) && x == Math.round(x)) {\n-    return x;\n-  }\n-  else {\n-    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n-    return false;\n-  }\n-};\n-\n-// TODO add response to cancel choice\n-\n-var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n-\n-// Assignment code here\n-\n-var generatePassword = function() {\n-\n-// intro statement to user;\n-  // getPasswordLength;\n-\n-  while (passwordLength == false) {\n-    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n-  }  \n-\n-\n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n-var firstTime = true;\n-while (numberOfTypesOfCharacters == 0) {\n-  // message to user about what's coming up / error message if they've already tried before\n-  if (firstTime) {\n-    window.alert(\"Next please choose types of characters to include in your password; you must include at least one type!\");\n-    firstTime = false;\n-  } else {\n-    window.alert(\"Please include at least one type of character in your password!\");\n-  };\n-  \n-  // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n-  for (i = 0; i < passwordSource.length; i++ ) {\n-    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n-    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n-      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n-      // if y, increment number of required chars and update include that type\n-      if (typeChoice == \"y\") {\n-        passwordSource[i].includeInPassword = true;\n-        numberOfTypesOfCharacters++;\n-      };\n-    }\n-  }\n-  \n-}\n-//    fillPasswordArray();\n-// for each type of char\n-for (i = 0; i < passwordSource.length; i++ ) {\n-  // if char is included\n-  if (passwordSource[i].includeInPassword == true) {\n-    // add that string to the pull-from string\n-    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n-  }\n-};\n-\n-// for password length - number of required\n-for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n-  // pull values into the working string from the pull-from string\n-  passwordArray.push(getRandomElementFromArray(characterSet));\n-};\n-debugger;\n-\n-// for each type of char\n-for (i=0; i < passwordSource.length; i++) {\n-  // if char is included \n-  if (passwordSource[i].includeInPassword == true) {\n-    // splice in required chars\n-    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n-    \n-  };\n-}\n-\n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n-};\n-\n-\n-// Write password to the #password input\n-function writePassword() {\n-  var password = generatePassword();\n-  var passwordText = document.querySelector(\"#password\");\n-  \n-  passwordText.value = password;\n-  \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n-}\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n-   // do you want the same settings as last time?\n    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1637420878977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,18 +180,14 @@\n \n // Write password to the #password input\n function writePassword() {\n \n-  //passwordText.value = \" \"; // added to clear password window if one has already been provided and user wants another one\n+  passwordText.value = \"\"; // clear password window if one has already been provided and user wants another one\n \n   var password = generatePassword();\n   \n   passwordText.value = password;\n   \n-  resetVariables(); // added to get ready for next password request and also so that the password is not sitting around in memory for hackers\n+  resetVariables(); // clear password traces from memory and get ready for next password request\n }\n-// Add event listener to generate button\n-generateBtn.addEventListener(\"click\", writePassword);\n-\n-   \n\\ No newline at end of file\n-   // do you want the same settings as last time?\n-   \n+// event listener for generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1637421169709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,8 @@\n for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n   // pull values into the working string from the pull-from string\n   passwordArray.push(getRandomElementFromArray(characterSet));\n };\n-debugger;\n \n // for each type of char\n for (i=0; i < passwordSource.length; i++) {\n   // if char is included \n@@ -172,16 +171,17 @@\n     \n   };\n }\n \n- passwordString = passwordArray.join(\"\");\n- return passwordString;\n+passwordString = passwordArray.join(\"\");\n+return passwordString;\n };\n \n \n // Write password to the #password input\n function writePassword() {\n-\n+  \n+  debugger;\n   passwordText.value = \"\"; // clear password window if one has already been provided and user wants another one\n \n   var password = generatePassword();\n   \n"
                },
                {
                    "date": 1637421375890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,8 @@\n \n // Write password to the #password input\n function writePassword() {\n   \n-  debugger;\n   passwordText.value = \"\"; // clear password window if one has already been provided and user wants another one\n \n   var password = generatePassword();\n   \n"
                },
                {
                    "date": 1637421635345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,10 @@\n // Write password to the #password input\n function writePassword() {\n   \n   passwordText.value = \"\"; // clear password window if one has already been provided and user wants another one\n-\n+  setTimeout(,5); // give time for the browser to render the change in the previous line\n+  \n   var password = generatePassword();\n   \n   passwordText.value = password;\n   \n"
                },
                {
                    "date": 1637421775148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,11 +179,8 @@\n \n // Write password to the #password input\n function writePassword() {\n   \n-  passwordText.value = \"\"; // clear password window if one has already been provided and user wants another one\n-  setTimeout(,5); // give time for the browser to render the change in the previous line\n-  \n   var password = generatePassword();\n   \n   passwordText.value = password;\n   \n"
                },
                {
                    "date": 1637422144068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n   var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n   return array[randomIndex];\n }\n \n-// splices a given value in a random location in an array; this is used to make sure that required characters are always included in the output\n+// splices a given value into a random location in a given array; this is used to ensure that required characters are always included in the output\n var spliceValueAtRandomIndex = function(value, array) {\n   var lastElementIndex = array.length - 1;\n   var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n   array = array.splice(randomIndex, 0, value);\n@@ -98,10 +98,12 @@\n   }\n };\n \n // TODO add response to cancel choice\n+var userClickedCancel = function() {\n+  window.alert(\"You clicked \\\"Cancel\\\"; if you wish to restart, please refresh this page; if you wish to exit altogether, please close this browser window.  If you click \\\"OK,\\\" we'll continue from where we were.\")\n+}\n \n-\n // Assignment code here\n \n var generatePassword = function() {\n   \n"
                },
                {
                    "date": 1637422254373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n   // getPasswordLength;\n \n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    // if return null - cancel\n+    if passwordLength = null {userClickedCancel};\n     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n \n \n"
                },
                {
                    "date": 1637422526074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,10 +112,12 @@\n   // getPasswordLength;\n \n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    if passwordLength = null {userClickedCancel};\n-    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+    if (passwordLength = null) {userClickedCancel}\n+    else {\n+      passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+    };\n   }  \n \n \n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n@@ -135,9 +137,12 @@\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n     while (typeChoice == false) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      // if return null - cancel\n+      if (typeChoice = null) {userClickedCancel}\n+      else {\n+        passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+      };\n       // get validated y or n\n       typeChoice = validateEntryYorN(typeChoice);\n       // if y, increment number of required chars and update include that type\n       if (typeChoice == \"y\") {\n"
                },
                {
                    "date": 1637422570164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n };\n \n // TODO add response to cancel choice\n var userClickedCancel = function() {\n-  window.alert(\"You clicked \\\"Cancel\\\"; if you wish to restart, please refresh this page; if you wish to exit altogether, please close this browser window.  If you click \\\"OK,\\\" we'll continue from where we were.\")\n+  window.alert(\"You clicked \\\"Cancel\\\"; if you wish to restart, please refresh this page; if you wish to exit altogether, please close this browser window.  If you click \\\"OK,\\\" we'll continue from where we were.\");\n }\n \n // Assignment code here\n \n"
                },
                {
                    "date": 1637422651343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n   // getPasswordLength;\n \n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    if (passwordLength = null) {userClickedCancel}\n+    if (passwordLength == null) {userClickedCancel}\n     else {\n       passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n     };\n   }  \n@@ -137,9 +137,9 @@\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n     while (typeChoice == false) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      if (typeChoice = null) {userClickedCancel}\n+      if (typeChoice == null) {userClickedCancel}\n       else {\n         passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n       };\n       // get validated y or n\n"
                },
                {
                    "date": 1637422844512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,9 +185,9 @@\n \n \n // Write password to the #password input\n function writePassword() {\n-  \n+  debugger;\n   var password = generatePassword();\n   \n   passwordText.value = password;\n   \n"
                },
                {
                    "date": 1637423546096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,12 +139,11 @@\n     while (typeChoice == false) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n       if (typeChoice == null) {userClickedCancel}\n       else {\n-        passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+        // get validated y or n\n+        typeChoice = validateEntryYorN(typeChoice);\n       };\n-      // get validated y or n\n-      typeChoice = validateEntryYorN(typeChoice);\n       // if y, increment number of required chars and update include that type\n       if (typeChoice == \"y\") {\n         passwordSource[i].includeInPassword = true;\n         numberOfTypesOfCharacters++;\n"
                },
                {
                    "date": 1637423721380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,11 @@\n   // getPasswordLength;\n \n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n-    if (passwordLength == null) {userClickedCancel}\n+    if (passwordLength == null) {\n+      userClickedCancel();\n+    }\n     else {\n       passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n     };\n   }  \n@@ -137,9 +139,11 @@\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n     while (typeChoice == false) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      if (typeChoice == null) {userClickedCancel}\n+      if (typeChoice == null) {\n+        userClickedCancel();\n+      }\n       else {\n         // get validated y or n\n         typeChoice = validateEntryYorN(typeChoice);\n       };\n"
                },
                {
                    "date": 1637423917200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,12 +114,10 @@\n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n     if (passwordLength == null) {\n       userClickedCancel();\n-    }\n-    else {\n-      passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n     };\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n \n \n // getTypesOfCharacters; TODO: how many include in passwords do we have?\n@@ -141,13 +139,12 @@\n     while (typeChoice == false) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n       if (typeChoice == null) {\n         userClickedCancel();\n-      }\n-      else {\n-        // get validated y or n\n-        typeChoice = validateEntryYorN(typeChoice);\n       };\n+      // get validated y or n\n+      typeChoice = validateEntryYorN(typeChoice);\n+\n       // if y, increment number of required chars and update include that type\n       if (typeChoice == \"y\") {\n         passwordSource[i].includeInPassword = true;\n         numberOfTypesOfCharacters++;\n"
                },
                {
                    "date": 1637424305435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n   var textToPromptTypeOfCharacter = null;\n   for (i = 0; i < passwordSource.length; i++ ) {\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false) {\n+    while (typeChoice == false || typeChoice == null) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n       if (typeChoice == null) {\n         userClickedCancel();\n       };\n"
                },
                {
                    "date": 1637424416912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n     while (typeChoice == false || typeChoice == null) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      if (typeChoice == null) {\n+      if (typeChoice == null) {XXXXXXXXXXXXXXXXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYxx\n         userClickedCancel();\n       };\n       // get validated y or n\n       typeChoice = validateEntryYorN(typeChoice);\n"
                },
                {
                    "date": 1637435165311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,16 +130,17 @@\n   } else {\n     window.alert(\"Please include at least one type of character in your password!\");\n   };\n   \n+  debugger;\n   // for all types of chars\n   var textToPromptTypeOfCharacter = null;\n   for (i = 0; i < passwordSource.length; i++ ) {\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n     while (typeChoice == false || typeChoice == null) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n-      if (typeChoice == null) {XXXXXXXXXXXXXXXXYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYxx\n+      if (typeChoice == null) {\n         userClickedCancel();\n       };\n       // get validated y or n\n       typeChoice = validateEntryYorN(typeChoice);\n@@ -185,9 +186,8 @@\n \n \n // Write password to the #password input\n function writePassword() {\n-  debugger;\n   var password = generatePassword();\n   \n   passwordText.value = password;\n   \n"
                },
                {
                    "date": 1637435899049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n \n \n-// getTypesOfCharacters; TODO: how many include in passwords do we have?\n+// getTypesOfCharacters; \n var firstTime = true;\n while (numberOfTypesOfCharacters == 0) {\n   // message to user about what's coming up / error message if they've already tried before\n   if (firstTime) {\n@@ -132,17 +132,21 @@\n   };\n   \n   debugger;\n   // for all types of chars\n-  var textToPromptTypeOfCharacter = null;\n+  var textToPromptTypeOfCharacter = null;  // TODO: why is this needed?\n+\n   for (i = 0; i < passwordSource.length; i++ ) {\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n-    while (typeChoice == false || typeChoice == null) {\n+\n+    while (typeChoice == false) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+\n       if (typeChoice == null) {\n         userClickedCancel();\n       };\n+\n       // get validated y or n\n       typeChoice = validateEntryYorN(typeChoice);\n \n       // if y, increment number of required chars and update include that type\n@@ -150,11 +154,13 @@\n         passwordSource[i].includeInPassword = true;\n         numberOfTypesOfCharacters++;\n       };\n     }\n+\n   }\n-  \n }\n+\n+\n //    fillPasswordArray();\n // for each type of char\n for (i = 0; i < passwordSource.length; i++ ) {\n   // if char is included\n"
                },
                {
                    "date": 1637436376608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n var firstTime = true;\n while (numberOfTypesOfCharacters == 0) {\n   // message to user about what's coming up / error message if they've already tried before\n   if (firstTime) {\n-    window.alert(\"Next, please choose types of characters to include in your password; there are \" + passwordSource.length + \" types. You must include at least one type!\");\n+    window.alert(\"Next, please choose types of characters to include in your password.  There are \" + passwordSource.length + \" types.  You must include at least one type!\");\n     firstTime = false;\n   } else {\n     window.alert(\"Please include at least one type of character in your password!\");\n   };\n"
                },
                {
                    "date": 1637436735073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n   };\n   \n   debugger;\n   // for all types of chars\n-  var textToPromptTypeOfCharacter = null;  // TODO: why is this needed?\n+  var textToPromptTypeOfCharacter = null;  // TODO: why is this needed? It is because we want to set up a variable.  But do we need to do this?\n \n   for (i = 0; i < passwordSource.length; i++ ) {\n     textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n     var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n@@ -142,8 +142,9 @@\n     while (typeChoice == false) {\n       typeChoice = window.prompt(textToPromptTypeOfCharacter);\n \n       if (typeChoice == null) {\n+        typeChoice = \"will not be validated\";\n         userClickedCancel();\n       };\n \n       // get validated y or n\n"
                },
                {
                    "date": 1637436927084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,8 +113,9 @@\n \n   while (passwordLength == false) {\n     passwordLength = window.prompt(textForPromptNumberOfCharacters);\n     if (passwordLength == null) {\n+      passwordLength = \"will not be validated\";\n       userClickedCancel();\n     };\n     passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n   }  \n"
                },
                {
                    "date": 1637437299672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate button and #password textarea\n+var generateBtn = document.querySelector(\"#generate\");\n+var passwordText = document.querySelector(\"#password\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value into a random location in a given array; this is used to ensure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+var userClickedCancel = function() {\n+  window.alert(\"You clicked \\\"Cancel\\\"; if you wish to restart, please refresh this page; if you wish to exit altogether, please close this browser window.  If you click \\\"OK,\\\" we'll continue from where we were.\");\n+}\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    if (passwordLength == null) {\n+      passwordLength = \"will not be validated\";\n+      userClickedCancel();\n+    };\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; \n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password.  There are \" + passwordSource.length + \" types.  You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  debugger;\n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;  // TODO: why is this needed? It is because we want to set up a variable.  But do we need to do this?\n+\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+\n+      if (typeChoice == null) {\n+        typeChoice = false;\n+        userClickedCancel();\n+      } else {\n+        // get validated y or n\n+        typeChoice = validateEntryYorN(typeChoice);\n+\n+        // if y, increment number of required chars and update include that type\n+        if (typeChoice == \"y\") {\n+          passwordSource[i].includeInPassword = true;\n+          numberOfTypesOfCharacters++;\n+        };\n+      } \n+    }\n+  }\n+}\n+\n+\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+passwordString = passwordArray.join(\"\");\n+return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // clear password traces from memory and get ready for next password request\n+}\n+// event listener for generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1637437359611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+const minCharsInPassword = 8;\n+const maxCharsInPassword = 128;\n+const lowerCaseLetters = ['a', 'b','c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's','t', 'u', 'v', 'w', 'x', 'y', 'z'];\n+const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n+const numbersZeroToNine = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n+const specialCharacters = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '+', '-', '.', '~', '|', '<', '>', '=', '-', '_', '/', ':', ';', '?', '[', ']', '{', '}', '~'];\n+\n+// character type objects\n+var lowerCaseLettersObject = {\n+  name: \"lower case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: lowerCaseLetters\n+}\n+var upperCaseLettersObject = {\n+  name: \"upper case letter\",\n+  includeInPassword: false,\n+  arrayOfCharacters: upperCaseLetters\n+}\n+var numbersZeroToNineObject = {\n+  name: \"number\",\n+  includeInPassword: false,\n+  arrayOfCharacters: numbersZeroToNine\n+}\n+var specialCharactersObject = {\n+  name: \"special character\",\n+  includeInPassword: false,\n+  arrayOfCharacters: specialCharacters\n+}\n+//array of character-type objects; this allows \"for\" loops to be used\n+var passwordSource = [lowerCaseLettersObject, upperCaseLettersObject, numbersZeroToNineObject, specialCharactersObject];\n+\n+var passwordLength = false; // false is a placeholder until user enters a valid password length; while it is false the user is prompted for a password length\n+var numberOfTypesOfCharacters = 0; // used to confirm that user has selected at least one type of character and to reserve space for required characters\n+var characterSet = []; // working array to use as source for password characters\n+var passwordArray = []; // working array to hold the password characters as they are generated\n+var passwordString = \"\"; // this is the string for the password output\n+\n+var resetVariables = function() {\n+  passwordLength = false;\n+  numberOfTypesOfCharacters = 0;\n+  characterSet = [];\n+  passwordArray = [];\n+  passwordString = \"\";\n+  for (let i = 0; i < passwordSource.length; i++) {\n+    passwordSource[i].includeInPassword = false;\n+  }\n+}\n+\n+// Get references to the #generate button and #password textarea\n+var generateBtn = document.querySelector(\"#generate\");\n+var passwordText = document.querySelector(\"#password\");\n+\n+// generates random number between two numbers, inclusive\n+var getRandomNumberFromTo = function(min, max) {\n+  var x = Math.floor(Math.random() * (max - min + 1) + min);\n+  return x;\n+}            \n+\n+// pulls an element at random from an array\n+var getRandomElementFromArray = function(array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  return array[randomIndex];\n+}\n+\n+// splices a given value into a random location in a given array; this is used to ensure that required characters are always included in the output\n+var spliceValueAtRandomIndex = function(value, array) {\n+  var lastElementIndex = array.length - 1;\n+  var randomIndex = getRandomNumberFromTo(0, lastElementIndex);\n+  array = array.splice(randomIndex, 0, value);\n+}\n+\n+// validates \"y\" or \"n\" entry, returns error message otherwise\n+var validateEntryYorN = function(string) {\n+  if (string.toLowerCase() == \"y\" || string.toLowerCase() == \"yes\") {\n+    return \"y\";\n+  }\n+  else {\n+    if (string.toLowerCase() == \"n\" || string.toLowerCase() == \"no\") {\n+      return \"n\";\n+    }\n+    else {\n+      window.alert(\"Your entry was not \\\"Y\\\" or \\\"N.\\\"  Please try again.\");\n+      return false;\n+    }\n+  }\n+};\n+\n+// validates entry is an integer within a min/max range, returns error message otherwise\n+var validateEntryNumberWithMinMax = function(string, min, max) {\n+  var x = Number(string);\n+  if ((x >= min && x <=max) && x == Math.round(x)) {\n+    return x;\n+  }\n+  else {\n+    textForPromptNumberOfCharacters = \"Your last entry for the number of characters in the password didn't work.  Please enter a whole number (integer) between \" + min + \" and \" + max + \".\";\n+    return false;\n+  }\n+};\n+\n+// TODO add response to cancel choice\n+var userClickedCancel = function() {\n+  window.alert(\"You clicked \\\"Cancel\\\"; if you wish to restart, please refresh this page; if you wish to exit altogether, please close this browser window.  If you click \\\"OK,\\\" we'll continue from where we were.\");\n+}\n+\n+// Assignment code here\n+\n+var generatePassword = function() {\n+  \n+  // intro statement to user;\n+  var textForPromptNumberOfCharacters = \"Please indicate the number of characters needed for the password (minimum of \" + minCharsInPassword + \"; maximum of \" + maxCharsInPassword + \")\";\n+  // getPasswordLength;\n+\n+  while (passwordLength == false) {\n+    passwordLength = window.prompt(textForPromptNumberOfCharacters);\n+    if (passwordLength == null) {\n+      passwordLength = \"will not be validated\";\n+      userClickedCancel();\n+    };\n+    passwordLength = validateEntryNumberWithMinMax(passwordLength, minCharsInPassword, maxCharsInPassword);\n+  }  \n+\n+\n+// getTypesOfCharacters; \n+var firstTime = true;\n+while (numberOfTypesOfCharacters == 0) {\n+  // message to user about what's coming up / error message if they've already tried before\n+  if (firstTime) {\n+    window.alert(\"Next, please choose types of characters to include in your password.  There are \" + passwordSource.length + \" types.  You must include at least one type!\");\n+    firstTime = false;\n+  } else {\n+    window.alert(\"Please include at least one type of character in your password!\");\n+  };\n+  \n+  // for all types of chars\n+  var textToPromptTypeOfCharacter = null;  // TODO: why is this needed? It is because we want to set up a variable.  But do we need to do this?\n+\n+  for (i = 0; i < passwordSource.length; i++ ) {\n+    textToPromptTypeOfCharacter = \"Would you like to include \" + passwordSource[i].name.toUpperCase() + \"S in your password?  Please respond with \\\"Y\\\" or \\\"N.\\\"\"\n+    var typeChoice = false; // this variable is used to repeat the prompt if an invalid entry is given, so it needs to be reset with each for loop\n+\n+    while (typeChoice == false) {\n+      typeChoice = window.prompt(textToPromptTypeOfCharacter);\n+\n+      if (typeChoice == null) {\n+        typeChoice = false;\n+        userClickedCancel();\n+      } else {\n+        // get validated y or n\n+        typeChoice = validateEntryYorN(typeChoice);\n+\n+        // if y, increment number of required chars and update include that type\n+        if (typeChoice == \"y\") {\n+          passwordSource[i].includeInPassword = true;\n+          numberOfTypesOfCharacters++;\n+        };\n+      } \n+    }\n+  }\n+}\n+\n+\n+//    fillPasswordArray();\n+// for each type of char\n+for (i = 0; i < passwordSource.length; i++ ) {\n+  // if char is included\n+  if (passwordSource[i].includeInPassword == true) {\n+    // add that string to the pull-from string\n+    characterSet = characterSet.concat(passwordSource[i].arrayOfCharacters);\n+  }\n+};\n+\n+// for password length - number of required\n+for (i = 0; i < (passwordLength - numberOfTypesOfCharacters); i++ ) {\n+  // pull values into the working string from the pull-from string\n+  passwordArray.push(getRandomElementFromArray(characterSet));\n+};\n+\n+// for each type of char\n+for (i=0; i < passwordSource.length; i++) {\n+  // if char is included \n+  if (passwordSource[i].includeInPassword == true) {\n+    // splice in required chars\n+    spliceValueAtRandomIndex(getRandomElementFromArray(passwordSource[i].arrayOfCharacters), passwordArray);\n+    \n+  };\n+}\n+\n+passwordString = passwordArray.join(\"\");\n+return passwordString;\n+};\n+\n+\n+// Write password to the #password input\n+function writePassword() {\n+  var password = generatePassword();\n+  \n+  passwordText.value = password;\n+  \n+  resetVariables(); // clear password traces from memory and get ready for next password request\n+}\n+// event listener for generate button\n+generateBtn.addEventListener(\"click\", writePassword);\n\\ No newline at end of file\n"
                }
            ],
            "date": 1637038011201,
            "name": "Commit-0",
            "content": "/* \t        create array of required\n            add required into each\n              Fill remaining spots at random\n            Scramble\n            Fill slots sequentially\n\n            BASIC UTILITY: generate random number between two numbers\n            function for pulling from list\n                get length of this array\n                get a random number based on length\n                pull from the array\n            function for shuffling\n                set up array to be scrambled\n                get a random number in length of array\n                pull out that location in the array\n                    send out that value\n                    remove that value from the array\n            BASIC VAR: arrays of password characters\n              a-z ; A-Z ; 0-9 ; special characters list\n            \nwelcome user\nhow long a password\n    reject bad answers\n        quit if necessary\nwhat are required characters\n    numbers?\n        reject bad answers\n            quit\n    special characters?\n        reject\n            quit\ngenerate password\n    set up parameters\n        length of password\n        requirements of password\n    fill in required characters first\n    fill in remaining characters using whole list\n    shuffle the array\npresent password\n    offer to copy to clipboard\nask whether another password is desired\n    same parameters or different\n    go back to start\n    quit\n\nvar promptFight = window.prompt('Would you like to FIGHT or SKIP this battle? Enter \"FIGHT\" or \"SKIP\" to choose.');\n    if (promptFight === 'skip' || promptFight === 'SKIP') {\n    \nvar enemyNames = ['Roborto', 'Amy Android', 'Robo Trumble'];\n\n\nwelcome user\nwhile user wants password\n    if criteria are needed\n        get criteria\n    generate password\n    display password\n    need another password?\ngood bye user\n\n    */\n\n\n\n// Assignment code here\n\n\n// Get references to the #generate element\nvar generateBtn = document.querySelector(\"#generate\");\n\n// Write password to the #password input\nfunction writePassword() {\n  var password = generatePassword();\n  var passwordText = document.querySelector(\"#password\");\n\n  passwordText.value = password;\n\n}\n\n// Add event listener to generate button\ngenerateBtn.addEventListener(\"click\", writePassword);\n"
        }
    ]
}